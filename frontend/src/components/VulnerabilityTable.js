import React, { useState } from 'react';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
import { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';
import { SeverityBadge } from './ui/SeverityBadge';
import { Skeleton } from './ui/Skeleton';

const VulnerabilityRow = ({ finding }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <>
      <TableRow
        hover
        onClick={() => setIsExpanded(!isExpanded)}
        className="cursor-pointer group hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
        sx={{ '&.Mui-selected': { backgroundColor: 'transparent' }, '&.MuiTableRow-hover:hover': { backgroundColor: 'inherit' } }}
      >
        <TableCell className="w-12 group-hover:shadow-soft focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50">
          {isExpanded ? <KeyboardArrowUp /> : <KeyboardArrowDown />}
        </TableCell>
        <TableCell>
          <SeverityBadge severity={finding.severity} className="px-2 py-1 text-xs rounded-full" />
        </TableCell>
        <TableCell>{finding.vulnerability_type}</TableCell>
        <TableCell>{finding.affected_url}</TableCell>
      </TableRow>
      {isExpanded && (
        <TableRow>
          <TableCell colSpan={4}>
            <div className="p-4 bg-neutral-50 dark:bg-neutral-800 text-sm">
              <h4 className="font-semibold mb-2">Description</h4>
              <p className="mb-4">{finding.description}</p>
              {finding.remediation && (
                <>
                  <h4 className="font-semibold mb-2">Remediation</h4>
                  <p>{finding.remediation}</p>
                </>
              )}
            </div>
          </TableCell>
        </TableRow>
      )}
    </>
  );
};

const VulnerabilityTable = ({ findings, isLoading }) => {
  if (isLoading) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-8 w-32" />
        </div>
        <div className="space-y-2">
          {[...Array(5)].map((_, index) => (
            <div key={index} className="flex items-center space-x-4 p-4 border rounded-lg">
              <Skeleton className="h-4 w-4" />
              <Skeleton className="h-4 w-16" />
              <Skeleton className="h-4 w-1/3" />
              <Skeleton className="h-4 w-1/4" />
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (!findings || findings.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-neutral-600 dark:text-neutral-300">No vulnerabilities found.</p>
      </div>
    );
  }

  return (
    <TableContainer component={Paper}>
      <Table>
        <TableHead className="bg-neutral-100 dark:bg-neutral-700 uppercase text-xs text-muted-foreground">
          <TableRow>
            <TableCell></TableCell>
            <TableCell>Severity</TableCell>
            <TableCell>Type</TableCell>
            <TableCell>URL</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {findings.map((finding, index) => (
            <VulnerabilityRow key={index} finding={finding} />
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default VulnerabilityTable;