import React, { useState, useMemo } from 'react';
import { Search } from 'lucide-react';

export interface VulnerabilityData {
  id: string;
  title: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low' | 'Info';
  cwe: string;
  cve: string;
  description: string;
  remediation: string;
  location: string;
  confidence: number;
  category: string;
  impact: string;
  cvss: number;
}

export interface GroupedVulnerability {
  groupKey: string;
  title: string;
  severity: VulnerabilityData['severity'];
  cwe: string;
  cve: string;
  description: string;
  remediation: string;
  confidence: number;
  cvss: number;
  instances: VulnerabilityData[];
  count: number;
}

interface VulnerabilityListProps {
  groupedVulnerabilities: GroupedVulnerability[];
  selectedVuln: GroupedVulnerability | null;
  onSelectVuln: (vuln: GroupedVulnerability) => void;
  filterSeverity: string;
  setFilterSeverity: (severity: string) => void;
}

const cn = (...classes: (string | undefined | null | false)[]): string => {
  return classes.filter(Boolean).join(' ');
};

const getSeverityColor = (severity: string) => {
  switch (severity.toLowerCase()) {
    case 'critical': return 'text-red-500 bg-red-500/10 border-red-500/20';
    case 'high': return 'text-orange-400 bg-orange-400/10 border-orange-400/20';
    case 'medium': return 'text-yellow-400 bg-yellow-400/10 border-yellow-400/20';
    case 'low': return 'text-sky-400 bg-sky-400/10 border-sky-400/20';
    case 'info': return 'text-gray-400 bg-gray-400/10 border-gray-400/20';
    default: return 'text-gray-400 bg-gray-400/10 border-gray-400/20';
  }
};

const severities: ('All' | VulnerabilityData['severity'])[] = ['All', 'Critical', 'High', 'Medium', 'Low', 'Info'];

const VulnerabilityList: React.FC<VulnerabilityListProps> = ({
  groupedVulnerabilities,
  selectedVuln,
  onSelectVuln,
  filterSeverity,
  setFilterSeverity,
}) => {
  const [searchTerm, setSearchTerm] = useState('');

  const filteredVulnerabilities = groupedVulnerabilities.filter((vuln) => {
    const localMatch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase());
    
    return (
      (filterSeverity === 'all' || vuln.severity.toLowerCase() === filterSeverity.toLowerCase()) &&
      localMatch
    );
  });

  return (
    <div className="bg-surface rounded-lg">
      <div className="p-4 border-b border-border">
        <h2 className="text-xl font-bold text-text mb-4">Vulnerabilities ({filteredVulnerabilities.length})</h2>
        <div className="flex items-center justify-between space-x-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-textSecondary" size={18} />
            <input
              type="text"
              placeholder="Filter by title or location..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full bg-background text-text rounded-md pl-10 pr-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <div className="flex items-center space-x-1 bg-background p-1 rounded-md">
            {severities.map((severity) => (
              <button
                key={severity}
                onClick={() => setFilterSeverity(severity.toLowerCase())}
                className={cn(
                  'px-3 py-1.5 text-sm font-medium rounded-md transition-colors',
                  filterSeverity === severity.toLowerCase()
                    ? 'bg-primary text-background'
                    : 'text-textSecondary hover:bg-surface'
                )}
              >
                {severity}
              </button>
            ))}
          </div>
        </div>
      </div>

      <div className="max-h-[60vh] overflow-y-auto">
        {filteredVulnerabilities.map((vuln) => (
          <div
            key={vuln.groupKey}
            className={cn(
              'p-4 border-b border-border cursor-pointer hover:bg-background transition-colors',
              selectedVuln?.groupKey === vuln.groupKey && 'bg-background border-l-4 border-l-primary',
            )}
            onClick={() => onSelectVuln(vuln)}
          >
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-2">
                  <span className={cn(
                    'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border',
                    getSeverityColor(vuln.severity),
                  )}>
                    {vuln.severity}
                  </span>
                   <span className="text-xs text-textSecondary bg-background px-2 py-1 rounded">
                    {vuln.cwe}
                  </span>
                </div>
                <h4 className="font-medium text-text mb-1">{vuln.title}</h4>
              </div>
              <div className="flex items-center space-x-2 ml-4">
                <div className="text-center bg-background rounded-md px-3 py-1">
                  <div className="text-xl font-bold text-primary">{vuln.count}</div>
                  <div className="text-xs text-textSecondary">locations</div>
                </div>
              </div>
            </div>
          </div>
        ))}
        {filteredVulnerabilities.length === 0 && (
          <div className="p-10 text-center text-textSecondary">
            <p>No vulnerabilities match your current filters.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default React.memo(VulnerabilityList); 